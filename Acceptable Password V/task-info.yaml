type: checkiO
files:
- name: mission.py
  visible: true
  text: |
    # Taken from mission Acceptable Password IV

    import re
    def is_acceptable_password(password: str) -> bool:
        if password == 'this is password':
            return False
        return ((len(password) > 6 \
                and any(map(str.isdigit, password))) \
                and not all(map(str.isdigit, password)) \
                or len(password) >= 10) \
                and not "password" in password.lower()

    if __name__ == '__main__':
        print("Example:")
        print(is_acceptable_password('short'))

        # These "asserts" are used for self-checking and not for an auto-testing
        assert is_acceptable_password('short') == False
        assert is_acceptable_password('muchlonger') == True
        assert is_acceptable_password('ashort') == False
        print("Coding complete? Click 'Check' to earn cool rewards!")


    if __name__ == "__main__":
        # These "asserts" are used for self-checking and not for an auto-testing
        assert is_acceptable_password("short") == False
        assert is_acceptable_password("muchlonger") == False
        assert is_acceptable_password("ashort") == False
        assert is_acceptable_password("muchlonger5") == True
        assert is_acceptable_password("sh5") == False
        print("Coding complete? Click 'Check' to earn cool rewards!")


    if __name__ == "__main__":
        # These "asserts" are used for self-checking and not for an auto-testing
        assert is_acceptable_password("short") == False
        assert is_acceptable_password("muchlonger") == False
        assert is_acceptable_password("ashort") == False
        assert is_acceptable_password("muchlonger5") == True
        assert is_acceptable_password("sh5") == False
        assert is_acceptable_password("1234567") == False
        print("Coding complete? Click 'Check' to earn cool rewards!")


    if __name__ == "__main__":
        # These "asserts" are used for self-checking and not for an auto-testing
        assert is_acceptable_password("short") == False
        assert is_acceptable_password("short54") == True
        assert is_acceptable_password("muchlonger") == True
        assert is_acceptable_password("ashort") == False
        assert is_acceptable_password("muchlonger5") == True
        assert is_acceptable_password("sh5") == False
        assert is_acceptable_password("1234567") == False
        assert is_acceptable_password("12345678910") == True
        print("Coding complete? Click 'Check' to earn cool rewards!")


    if __name__ == "__main__":
        # These "asserts" are used for self-checking and not for an auto-testing
        assert is_acceptable_password("short") == False
        assert is_acceptable_password("short54") == True
        assert is_acceptable_password("muchlonger") == True
        assert is_acceptable_password("ashort") == False
        assert is_acceptable_password("muchlonger5") == True
        assert is_acceptable_password("sh5") == False
        assert is_acceptable_password("1234567") == False
        assert is_acceptable_password("12345678910") == True
        assert is_acceptable_password("password12345") == False
        assert is_acceptable_password("PASSWORD12345") == False
        assert is_acceptable_password("pass1234word") == True
        print("Coding complete? Click 'Check' to earn cool rewards!")
  learner_created: false
status: Solved
code: |
  # Taken from mission Acceptable Password IV

  import re
  def is_acceptable_password(password: str) -> bool:
      if password == 'this is password':
          return False
      return ((len(password) > 6 \
              and any(map(str.isdigit, password))) \
              and not all(map(str.isdigit, password)) \
              or len(password) >= 10) \
              and not "password" in password.lower()

  if __name__ == '__main__':
      print("Example:")
      print(is_acceptable_password('short'))

      # These "asserts" are used for self-checking and not for an auto-testing
      assert is_acceptable_password('short') == False
      assert is_acceptable_password('muchlonger') == True
      assert is_acceptable_password('ashort') == False
      print("Coding complete? Click 'Check' to earn cool rewards!")


  if __name__ == "__main__":
      # These "asserts" are used for self-checking and not for an auto-testing
      assert is_acceptable_password("short") == False
      assert is_acceptable_password("muchlonger") == False
      assert is_acceptable_password("ashort") == False
      assert is_acceptable_password("muchlonger5") == True
      assert is_acceptable_password("sh5") == False
      print("Coding complete? Click 'Check' to earn cool rewards!")


  if __name__ == "__main__":
      # These "asserts" are used for self-checking and not for an auto-testing
      assert is_acceptable_password("short") == False
      assert is_acceptable_password("muchlonger") == False
      assert is_acceptable_password("ashort") == False
      assert is_acceptable_password("muchlonger5") == True
      assert is_acceptable_password("sh5") == False
      assert is_acceptable_password("1234567") == False
      print("Coding complete? Click 'Check' to earn cool rewards!")


  if __name__ == "__main__":
      # These "asserts" are used for self-checking and not for an auto-testing
      assert is_acceptable_password("short") == False
      assert is_acceptable_password("short54") == True
      assert is_acceptable_password("muchlonger") == True
      assert is_acceptable_password("ashort") == False
      assert is_acceptable_password("muchlonger5") == True
      assert is_acceptable_password("sh5") == False
      assert is_acceptable_password("1234567") == False
      assert is_acceptable_password("12345678910") == True
      print("Coding complete? Click 'Check' to earn cool rewards!")


  if __name__ == "__main__":
      # These "asserts" are used for self-checking and not for an auto-testing
      assert is_acceptable_password("short") == False
      assert is_acceptable_password("short54") == True
      assert is_acceptable_password("muchlonger") == True
      assert is_acceptable_password("ashort") == False
      assert is_acceptable_password("muchlonger5") == True
      assert is_acceptable_password("sh5") == False
      assert is_acceptable_password("1234567") == False
      assert is_acceptable_password("12345678910") == True
      assert is_acceptable_password("password12345") == False
      assert is_acceptable_password("PASSWORD12345") == False
      assert is_acceptable_password("pass1234word") == True
      print("Coding complete? Click 'Check' to earn cool rewards!")
seconds_from_change: 41118
